---
import ThemeIcon from "@components/ThemeIcon.astro";
import NavLink from "@components/ui/links/NavLink.astro";
import enStrings from "@utils/navigation.ts";
import frStrings from "@utils/fr/navigation.ts";
import BrandLogo from "@components/BrandLogo.astro";
import LanguagePicker from "@components/ui/LanguagePicker.astro";

const strings = Astro.currentLocale === "en" ? enStrings : frStrings;
const homeUrl = Astro.currentLocale === "en" ? "/en" : "/";
---

<header
  class="sticky inset-x-0 top-4 z-50 flex w-full flex-wrap text-base md:flex-nowrap md:justify-start"
>
  <nav
    class="relative mx-4 w-full max-w-7xl rounded-[28px] border border-gray-200/40 bg-gradient-to-r from-white/95 via-gray-50/90 to-white/95 px-6 py-3.5 shadow-lg shadow-gray-300/15 backdrop-blur-xl transition-all duration-300 hover:shadow-xl hover:shadow-gray-400/20 md:flex md:items-center md:justify-between md:px-8 md:py-4 lg:px-10 xl:mx-auto dark:border-gray-600/40 dark:bg-gradient-to-r dark:from-gray-800/95 dark:via-gray-700/90 dark:to-gray-800/95 dark:shadow-lg dark:shadow-gray-900/25 dark:backdrop-blur-xl dark:hover:shadow-xl dark:hover:shadow-gray-900/35"
    aria-label="Global"
  >
    <div class="flex items-center justify-between">
      <a
        class="group flex-none rounded-xl text-3xl font-bold outline-hidden duration-300 hover:scale-105 focus-visible:ring-4 dark:ring-yellow-300/50 dark:hover:shadow-yellow-300/25 dark:focus:outline-hidden"
        href={homeUrl}
        aria-label="Brand"
      >
      OBMAIN
        <!-- <BrandLogo
          class="h-auto w-28 transition-transform duration-300 group-hover:scale-105"
        /> -->
      </a>
      <div class="mr-6 ml-auto md:hidden">
        <button
          type="button"
          class="hs-collapse-toggle flex h-10 w-10 items-center justify-center rounded-xl bg-gradient-to-r from-yellow-100/50 to-orange-100/50 text-base font-bold text-neutral-700 shadow-sm transition-all duration-300 hover:scale-105 hover:bg-gradient-to-r hover:from-yellow-200/60 hover:to-orange-200/60 hover:shadow-md disabled:pointer-events-none disabled:opacity-50 dark:from-neutral-700/50 dark:to-neutral-600/50 dark:text-neutral-300 dark:hover:from-neutral-600/60 dark:hover:to-neutral-500/60 dark:focus:outline-hidden"
          data-hs-collapse="#navbar-collapse-with-animation"
          aria-controls="navbar-collapse-with-animation"
          aria-label="Toggle navigation"
        >
          <svg
            class="hs-collapse-open:hidden h-[1.25rem] w-[1.25rem] shrink-0"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <line x1="3" x2="21" y1="6" y2="6"></line>
            <line x1="3" x2="21" y1="12" y2="12"></line>
            <line x1="3" x2="21" y1="18" y2="18"></line>
          </svg>
          <svg
            class="hs-collapse-open:block hidden h-[1.25rem] w-[1.25rem] shrink-0"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <path d="M18 6 6 18"></path>
            <path d="m6 6 12 12"></path>
          </svg>
        </button>
      </div>
      <span class="inline-block md:hidden">
        <ThemeIcon />
      </span>
    </div>
    <div
      id="navbar-collapse-with-animation"
      class="hs-collapse hidden grow basis-full overflow-hidden transition-all duration-300 md:block"
    >
      <div
        class="mt-5 flex flex-col gap-x-0 gap-y-4 text-base md:mt-0 md:flex-row md:items-center md:justify-end md:gap-x-6 md:gap-y-0 md:ps-7 lg:gap-x-8"
      >
        {
          strings.navBarLinks.map((link) => (
            <NavLink url={link.url} name={link.name} />
          ))
        }

        <LanguagePicker />
        <span class="hidden md:inline-block">
          <ThemeIcon />
        </span>
      </div>
    </div>
  </nav>
</header>
<script is:inline>
  const HSThemeAppearance = {
    init() {
      const defaultTheme = "default";
      let theme = localStorage.getItem("hs_theme") || defaultTheme;

      if (document.querySelector("html").classList.contains("dark")) return;
      this.setAppearance(theme);
    },
    _resetStylesOnLoad() {
      const $resetStyles = document.createElement("style");
      $resetStyles.innerText = `*{transition: unset !important;}`;
      $resetStyles.setAttribute("data-hs-appearance-onload-styles", "");
      document.head.appendChild($resetStyles);
      return $resetStyles;
    },
    setAppearance(theme, saveInStore = true, dispatchEvent = true) {
      const $resetStylesEl = this._resetStylesOnLoad();

      if (saveInStore) {
        localStorage.setItem("hs_theme", theme);
      }

      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }

      document.querySelector("html").classList.remove("dark");
      document.querySelector("html").classList.remove("default");
      document.querySelector("html").classList.remove("auto");

      document
        .querySelector("html")
        .classList.add(this.getOriginalAppearance());

      setTimeout(() => {
        $resetStylesEl.remove();
      });

      if (dispatchEvent) {
        window.dispatchEvent(
          new CustomEvent("on-hs-appearance-change", { detail: theme })
        );
      }
    },
    getAppearance() {
      let theme = this.getOriginalAppearance();
      if (theme === "auto") {
        theme = window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "default";
      }
      return theme;
    },
    getOriginalAppearance() {
      const defaultTheme = "default";
      return localStorage.getItem("hs_theme") || defaultTheme;
    },
  };
  HSThemeAppearance.init();

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", () => {
      if (HSThemeAppearance.getOriginalAppearance() === "auto") {
        HSThemeAppearance.setAppearance("auto", false);
      }
    });

  window.addEventListener("load", () => {
    const $clickableThemes = document.querySelectorAll(
      "[data-hs-theme-click-value]"
    );
    const $switchableThemes = document.querySelectorAll(
      "[data-hs-theme-switch]"
    );

    $clickableThemes.forEach(($item) => {
      $item.addEventListener("click", () =>
        HSThemeAppearance.setAppearance(
          $item.getAttribute("data-hs-theme-click-value"),
          true,
          $item
        )
      );
    });

    $switchableThemes.forEach(($item) => {
      $item.addEventListener("change", (e) => {
        HSThemeAppearance.setAppearance(e.target.checked ? "dark" : "default");
      });

      $item.checked = HSThemeAppearance.getAppearance() === "dark";
    });

    window.addEventListener("on-hs-appearance-change", (e) => {
      $switchableThemes.forEach(($item) => {
        $item.checked = e.detail === "dark";
      });
    });
  });
</script>
