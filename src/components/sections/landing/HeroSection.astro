---
// Import the necessary dependencies
import { Image } from "astro:assets";
import PrimaryCTA from "@components/ui/buttons/PrimaryCTA.astro";
import SecondaryCTA from "@components/ui/buttons/SecondaryCTA.astro";
import ReviewComponent from "@components/ui/blocks/ReviewComponent.astro";

const {
  title,
  subTitle,
  primaryBtn,
  primaryBtnURL,
  secondaryBtn,
  secondaryBtnURL,
  withReview,
  avatars,
  starCount,
  rating,
  reviews,
  images,
  alts,
} = Astro.props;

interface Props {
  title: string;
  subTitle?: string;
  primaryBtn?: string;
  primaryBtnURL?: string;
  secondaryBtn?: string;
  secondaryBtnURL?: string;
  withReview?: boolean;
  avatars?: Array<string>;
  starCount?: number;
  rating?: string;
  reviews?: string;
  images?: Array<any>;
  alts?: Array<string>;
}
---

<section
  class="mx-auto grid max-w-[85rem] gap-4 px-4 py-14 sm:px-6 md:grid-cols-2 md:items-center md:gap-8 lg:px-8 2xl:max-w-full"
>
  <div>
    <h1
      class="block text-3xl font-bold tracking-tight text-balance text-neutral-800 sm:text-4xl lg:text-6xl lg:leading-tight dark:text-neutral-200"
    >
      <Fragment set:html={title} />
    </h1>
    {
      subTitle && (
        <p class="mt-3 text-lg leading-relaxed text-pretty text-neutral-700 lg:w-4/5 dark:text-neutral-400">
          {subTitle}
        </p>
      )
    }
    <div class="mt-7 grid w-full gap-3 sm:inline-flex">
      {primaryBtn && <PrimaryCTA title={primaryBtn} url={primaryBtnURL} />}
      {
        secondaryBtn && (
          <SecondaryCTA title={secondaryBtn} url={secondaryBtnURL} />
        )
      }
    </div>

    {
      withReview ? (
        <ReviewComponent
          avatars={avatars}
          starCount={starCount}
          rating={rating}
          reviews={reviews}
        />
      ) : (
        ""
      )
    }
  </div>
  <div class="flex w-full">
    <div class="relative top-12 overflow-hidden h-96 w-full">
      {
        images && images.length > 0 && (
          <div class="relative w-full h-full" id="hero-carousel">
            {images.map((image, index) => (
              <div 
                class={`hero-slide absolute inset-0 transition-opacity duration-1000 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
                data-slide={index}
              >
                <Image
                  src={image}
                  alt={alts?.[index] || `Hero image ${index + 1}`}
                  class="h-full w-full scale-110 rounded-r-[15px] object-cover object-center"
                  draggable="false"
                  loading={index === 0 ? "eager" : "lazy"}
                  quality="high"
                />
              </div>
            ))}
          </div>
        )
      }
    </div>
  </div>
</section>

<script>
  class HeroCarousel {
    private slides: NodeListOf<HTMLElement>;
    private currentSlide: number = 0;
    private intervalId: number | null = null;
    
    constructor() {
      this.slides = document.querySelectorAll('.hero-slide');
      this.init();
    }
    
    private init(): void {
      if (this.slides.length <= 1) return;
      
      this.startCarousel();
      
      // Pausar en hover
      const carousel = document.getElementById('hero-carousel');
      if (carousel) {
        carousel.addEventListener('mouseenter', () => this.stopCarousel());
        carousel.addEventListener('mouseleave', () => this.startCarousel());
      }
    }
    
    private showSlide(index: number): void {
      this.slides.forEach((slide, i) => {
        slide.classList.toggle('opacity-100', i === index);
        slide.classList.toggle('opacity-0', i !== index);
      });
    }
    
    private nextSlide(): void {
      this.currentSlide = (this.currentSlide + 1) % this.slides.length;
      this.showSlide(this.currentSlide);
    }
    
    private startCarousel(): void {
      if (this.intervalId) return;
      this.intervalId = window.setInterval(() => {
        this.nextSlide();
      }, 3000); // Cambio cada 3 segundos
    }
    
    private stopCarousel(): void {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
    }
  }
  
  // Inicializar el carrusel cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    new HeroCarousel();
  });
  
  // Reinicializar en navegación de Astro (para SPA)
  document.addEventListener('astro:page-load', () => {
    new HeroCarousel();
  });
</script>
